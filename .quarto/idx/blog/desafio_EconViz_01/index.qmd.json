{"title":"Reproduzindo gráfico do Economista Visual - Valor da cesta básica (PT-BR)","markdown":{"yaml":{"title":"Reproduzindo gráfico do Economista Visual - Valor da cesta básica (PT-BR)","author":"Henrique Costa","date":"2021-02-20","categories":["R","DataViz"],"description":"Desafio de reproduzir uma visualização, utilizando meus conhecimentos em R","image":"feature.png","title-block-banner":true},"headingText":"para retirar notacoes cientifica","containsRefs":false,"markdown":"\n\n![](feature.png)\n\nNa publicação de hoje, quero trazer uma brincadeira que fiz comigo mesmo, um pequeno incentivo para voltar a publicar conteúdos sobre R (eu já estava enferrujado) entre outros assunto sobre economia.\n\nPasseando pelo instagram, encontrei um perfil que pública muita informação sobre economia em formato de visualização, o Economista Visual.\n\nVendo um gráfico sobre o [preço da cesta básica na cidade de São Paulo - SP](https://www.instagram.com/p/CLaQpRiB8pR/)\n\n![](./img/cestabasica.jpg)\n\nResolvi criar o desafio de **reproduzir** esta visualização. Claro que não conseguiria deixar igual, mas poderia chegar bem perto.\n\nVamos começar pela fonte dos dados. Os dados utilizado no gráfico vem da base do DIEESE (Departamento Intersindical de Estatística e Estudos Socioeconômicos), que faz o levantamento do valor da Cesta Básica de Alimentos em várias cidades do país.\n\nAcessando o website do DIEESE, na pagina do banco de dados de [Cesta Básica de Alimentos](https://www.dieese.org.br/cesta/) é possível escolher a cidade desejada e fazer o *download* da planilha contendo as informações sobre o valor da cesta básica.\n\n![](./img/db_dieese.jpg)\n\nCom os dados em mãos, é hora de ir para o RStudio e começar \"os trabalhos\". *Let's Code!*\n\n``` r\noptions(scipen = 999)\n\n\n# Pacotes necessarios para o projeto\n\nlibrary(tidyverse)     # conjunto de pacotes essenciais\nlibrary(readxl)        # pacote para \"ler\" arquivos excel\nlibrary(lubridate)     # pacote para trabalhar com datas\nlibrary(scales)        # pacote para trabalhar com escalas\nlibrary(here)          # fluxos de trabalho orientados a projetos\n```\n\nParticularmente, prefiro utilizar um fluxo orientado a projetos e por isso o pacote `here`está na lista acima. O pacote `here` implementa uma maneira mais simples de encontrar seus arquivos. O objetivo do pacote `here` é permitir a referência fácil de arquivos em [fluxos de trabalho orientados a projetos](https://rstats.wtf/project-oriented-workflow.html). Em contraste com o uso `setwd()`, que é frágil e dependente da maneira como você organiza seus arquivos, `here` usa o diretório de nível superior de um projeto para construir facilmente caminhos para os arquivos.\n\nApós carregar os pacotes, é hora de ler os dados que estão na planilha em formato `.xls`.\n\n``` r\n# Para carregar os dados usaremos o codigo a seguir:\n\ncesta_basica <- read_excel(     # funcao que ler arquivos .xls\n  here::here(                   # funcao que informa o local\n    \"dados\",\"exporta.xls\"       # \"local\", \"arquivo\"\n    )\n)\n```\n\nAgora que os dados já estão no *global environment*, vamos usar de alguns \"costumes\" de pré-analise para conhecer os dados. Lembrando que qualquer modificação nos dados será feito inteiramente e diretamente no R.\n\n``` r\n# visualizar a situacao dos dados\nhead(cesta_basica)              # funcao imprime no console \n                                # as 10 primeiras observacoes\n\n## A tibble: 6 x 2\n#  `Gasto Mensal - Total da Cesta` ...2     \n#  <chr>                           <chr>    \n# 1 NA                              São Paulo\n# 2 01-2000                         112.22   \n# 3 02-2000                         110.8    \n# 4 03-2000                         115.13   \n# 5 04-2000                         115.92   \n# 6 05-2000                         111.78 \n```\n\nO resultado mostra o óbvio, que os dados precisam de \"tratamento\" antes de pensarmos em extrair qualquer informação. Aqui neste caso, precisa retirar a primeira linha, que contém NA (*not available*) e uma palavra (São Paulo) onde deveria ser números. Os nomes das colunas (variáveis) também necessitam de atenção. Vamos olhar um pouco mais, com a função `tail()`.\n\n``` r\ntail(cesta_basica)              # funcao imprime no console \n                                # as 10 ultimas observacoes\n\n# A tibble: 6 x 2\n#  `Gasto Mensal - Total da Cesta`    ...2          \n#   <chr>                              <chr>         \n# 1 11-2020                            629.179999999~\n# 2 12-2020                            631.460000000~\n# 3 01-2021                            654.149999999~\n# 4 Fonte: DIEESE                      NA            \n# 5 (1) Série recalculada, conforme mudança metodológica realizada # na ~ NA            \n# 6 Tomada especial de preços a partir de abril de 2020 NA    \n```\n\nComo esperado, só reforça a necessidade de um tratamento simples nos dados. *A priori* é uma \"limpeza\" de linhas indesejadas.\n\nPor boas práticas, irei modificar o \"nome\" do objeto (data frame), pois CB é mais simples e fácil que cesta_basica.\n\n``` r\nCB <- cesta_basica %>%          # criando um objeto reduzindo\n                                # o nome do dataframe para CB\n                                # ao inves de cesta_basica\n                                # e usando o operador \" %>% \"\n  \n  rename(                       # funcao para renomear colunas\n    Data = `Gasto Mensal - Total da Cesta`,\n    Valor = ...2\n  ) %>%                       \n  slice(2:255)                  # funcao que corta os dados\n                                # retirando apenas o desejado\n```\n\nAgora temos que verificar as características dos nossos dados. Utilizo a função `srt()`.\n\n``` r\nstr(CB)\n\n# tibble [254 x 2] (S3: tbl_df/tbl/data.frame)\n# $ Data : chr [1:254] \"01-2000\" \"02-2000\" \"03-2000\" \"04-2000\" ...\n# $ Valor: chr [1:254] \"112.22\" \"110.8\" \"115.13\" \"115.92\" ...\n```\n\nTemos 254 observacoes e 2 colunas (variaveis) as 2 variaveis estao em formato -`chr`- caracteres e precisamos modificar esses formatos, passando a variavel `Valor` para o formato númerico, e a variável Data como datas, para isso utilizaremos os passos a seguir:\n\n``` r\nCB <- CB %>%                   # substituindo o dataframe\n  mutate(                      # funcao p/ modificar variaveis\n    Data = rep(seq(            # Substituindo a variavel Data\n                               # por uma variavel no formato de datas\n                               # criando uma sequencia de datas\n      from = as.Date(\"2000-01-01\"),\n      to = as.Date(\"2021-01-01\"),\n      by =\"1 month\"\n    )),\n    Valor = as.numeric(Valor) # modificando a variavel ´Valor´\n                              # para o formato numerico\n  )\n\n# Erro: Problem with `mutate()` input `Data`.\n# x Input `Data` can't be recycled to size 254.\n# i Input `Data` is `rep(...)`.\n# i Input `Data` must be size 254 or 1, not 253.\n```\n\nPercebemos esse erro que significa que o vetor de datas que tentamos criar nao é do mesmo \"tamanho\" que a variavel Data anterior. A variavel Data tem 254 observacoes e nosso vetor de datas tem apenas 253. Totalmente sem sentido, pois criamos um vetor de datas que segue uma sequencia mes a mes de 01/01/2000 ate 01/01/2021.\n\n*A priori*, temos a hipótese de que há valores e data repetidas como a base de dados eh pequena (254 obs) usaremos a funcao View() para ver a base completa e entende-la para encontrar a observacao repetida.\n\nEncontramos a observacao 193, com a data 12-2015 (1) e valor de 418.13. Como nao pesquisei a fundo o motivo, vou considerar como um reajuste no valor, entao irei retirar a observacao anterior (192).\n\nVou utilizar novamente o codigo acima, porém com um *upgrade*, adicionarei a funcao slice() para recortar a observacao 192.\n\n``` r\nCB <- CB %>%                   # substituindo o dataframe\n  slice(-192) %>%              # funcao p/ recortar \n  mutate(                      # funcao p/ modificar variaveis\n    Data = rep(seq(            # Substituindo a variavel Data\n                               # por uma variavel no formato de dadtas\n                               # criando uma sequencia de datas\n      from = as.Date(\"2000-01-01\"), \n      to = as.Date(\"2021-01-01\"), \n      by =\"1 month\"\n    )),\n    Valor = as.numeric(Valor)  # modificando a variavel ´Valor´\n                               # para o formato numerico\n  )\n```\n\nAgora vamos para a parte mais delicada de todo o desafio: criar a visualização, ou seja, reproduzir um gráfico parecido com o gráfico que foi publicado pelo Economista Visual.\n\nAntes de construir o gráfico, vamos elaborar a customização de uma tema para aplicar juntamente com o pacote `ggplot2`. Esta customização nos ajudará a gerar um gráfico parecido.\n\nNa construção do tema, precisamos usar a mesma fonte que o Economista Visual usa em seu gráfico, mas preferir não investigar qual fonte é usada, e usei uma fonte qualquer. Decidir usar a fonte Teko, que pode ser encontrada no [Google Fonts](https://fonts.google.com/specimen/Teko?preview.text_type=custom)\n\n``` r\ncustom_theme <- function(){\n  font <- \"Teko\"             # definindo a fonte a ser utilizada\n  theme(\n    # Elementos de grade e painel\n    panel.border =  element_blank(),       # sem borda\n    panel.grid.major.x = element_blank(),  # sem grades em X\n    panel.grid.minor.x = element_blank(),  # sem grades em X\n    panel.grid.major.y = element_line(\n    color = \"#d2d2d2\"                      # cor para a linha\n    ),                                     # da grade em Y\n    panel.grid.minor.y = element_blank(),  # sem grades menor em Y,     \n    axis.ticks = element_blank(),          # tira pontos do eixo\n    # Elementos textuais\n    plot.title = element_text(             # Titulo\n      family = font,                       # definir font\n      size = 20,                           # definir tamanho\n      face = 'bold',                       # negrito\n      color = \"black\",                     # cor da fonte\n      hjust = 0,                           # ajuste p/ esquerda*\n      vjust = 2),                          \n    \n    # *O valor de hjust e vjust sao \n    # definidos entre 0 e 1:\n    # 0 significa justificado a esquerda\n    # 1 significa justificado a direita\n    # 0.5 significa justificado ao meio\n    \n    plot.subtitle = element_text(          # Sub-titulo\n      family = font,                       # fonte\n      color=\"black\",                       # cor da fonte\n      size = 12),                          # tamanho\n      \n    plot.caption = element_text(           # Legenda\n      family = font,                       # fonte\n      size = 9,                            # tamanho da fonte\n      face = \"italic\",                     # italico\n      colour = \"#4c4c4c\",                  # cor da fonte\n      hjust = 0),                          # ajuste a esquerda\n    \n    axis.title = element_text(             # Titulo dos eixos\n      family = font,                       # fonte\n      face = 'bold',                       # negrito\n      color = \"#2e2e2e\",                   # cor da fonte\n      size = 10),                          # tamanho\n    \n    axis.text = element_text(              # Texto dos eixos\n      family = font,                       # fonte\n      color = \"#2e2e2e\",                   # cor\n      size = 9),                           # tamanho\n    \n    axis.text.x = element_text(            # margem p/ texto dos eixos\n      color = \"#2e2e2e\",                   # cor\n      margin=margin(5, b = 10)),\n    \n    axis.text.y = element_text(            # margem p/ texto dos eixos\n      color = \"#2e2e2e\",                   # cor\n      margin=margin(10, b = 20)),\n    \n    legend.position=\"bottom\",              # Posição da legenda\n                                           # bottom = meio-inferior\n    legend.title = element_blank(),        # Anular o título da legenda\n    legend.text = element_text(\n      colour=\"#2e2e2e\",                    # cor da legenda \n      family = font                        # fonte\n    ),\n    plot.background = element_rect(\n      fill = \"#f7efd8\",                    # cor de fundo do grafico\n      colour = NA\n      ),\n    panel.background = element_rect(\n      fill = \"#f7efd8\",                    # cor de fundo do painel\n      colour = NA\n      )\n    \n    # since the legend often requires manual tweaking \n    # based on plot content, don't define it here\n  )\n}\n```\n\nCom esse bloco de código acima, definimos o tema personalizado para aplicarmos ao gráfico. O gráfico do Economista Visual, usa uma fonte diferente do comum, fonte que não sei qual é, e o seu título e sub-título na cor preta com ajuste a esquerda (definimos isso no tema que customizamos acima), texto nos eixos em uma cor parecido com um cinza numa escala mais clara, a mesma cor para a legenda que também é ajustada a esquerda, e por fim, o gráfico é do tipo linha, na cor vermelha com um efeito \"glow\", ponto sólido menor que o circulo, e anotação em texto, tudo na cor vermelha.\n\nO eixo X é composto pelos anos observados (datas), e a escala do eixo X inicia no ano 2000 e termina no ano 2021 com intervalos a cada 1 ano. Já no eixo Y, temos os valores na escala de 0 a 700, com intervalo a cada 100.\n\nTendo essas informações em mente, é hora de elaborarmos o gráfico. Para isso, será utilizado as funções do pacote `ggplot2` e aplicaremos o tema customizado para ajustar a estética do nosso gráfico ao gráfico do Economista Visual.\n\n``` r\nplot <- CB %>%              # definindo o gráfico\n  ggplot(aes(x=Data)) +     # adicionando apenas o eixo X\n  geom_line(                # 1° linha do eixo Y\n    aes(y = Valor),         # definindo o Valor para o eixo Y\n    size = 3,               # espessura da linha\n    colour = '#e20000',     # cor (esolhi um verlho aleatorio)\n    alpha = 0.1             # alpha mede a transparência\n    ) +\n  geom_line(                # 2° linha do eixo Y\n    aes(y = Valor),         # definindo o Valor para o eixo Y\n    size = 2,               # espessura (menor que a 1°)\n    colour = '#e20000',     # cor (a mesma cor para todas)\n    alpha = 0.2             # transparência (maior que a 1°)\n    ) +\n  geom_line(                # 3° linha do eixo Y\n    aes(y = Valor),         # definindo o Valor para o eixo Y\n    size = 1,               # espessura (menor que a 2°) \n    colour = '#e20000',     # cor\n    alpha = 0.5             # transparência (maior que a 2°)\n    ) +\n  geom_line(                # 4° linha do eixo Y\n    aes(y = Valor),         # definindo o Valor para o eixo Y\n    size = 0.75,            # espessura (menor que a 3°)\n    colour = '#e20000'      # cor\n    ) +                     # sem alpha, para deixar a cor sólida\n  annotate(                 # 1° anotação 1/3\n    geom=\"text\",            # tipo de anotação: texto\n    x=as.Date(\"2000-01-01\"), # ponto que a anotação deve aparecer\n    y=160,                  # ajustando a altura do anotação\n    label=\"R$ 112,22\",      # Texto de referência\n    size=4,                 # tamanho do texto\n    color = \"#e20000\",      # cor do texto (a mesma da linha)\n    family = \"Teko\"         # fonte do texto (opcional)\n    ) +\n  annotate(                 # 1° anotação 2/3\n    geom=\"point\",           # tipo de anotação: ponto\n    x=as.Date(\"2000-01-01\"), # ponto que a anotação deve aparecer\n    y=112,                  # ponto cruzado entre X e Y\n    size=3,                 # tamanho do ponto\n    color = \"#e20000\"       # cor do ponto\n    ) +\n  annotate(                 # 1° anotação 3/3\n    geom=\"point\",           # tipo de anotação: ponto\n    x=as.Date(\"2000-01-01\"), # ponto que a anotação de aparecer\n    y=112,                  # ponto cruzado entre X e Y\n    size=5,                 # tamanho do ponto\n    shape=21,               # formato do ponto\n    fill=\"transparent\",     # preenchimento transparente\n    color=\"#e20000\"         # cor, aplica somente na borda \n    ) +\n  annotate(                 # 2° anotação 1/3\n    geom=\"text\",            # tipo de anotação: texto\n    x=as.Date(\"2016-01-01\"), # ponto que a anotação deve aparecer\n    y=500,                  # ajustando a altura da anotação\n    label=\"R$ 448,31\",      # texto de referência\n    size=4,                 # tamanho do texto\n    color = \"#e20000\",      # cor do texto\n    family = \"Teko\"         # fonte do texto\n    ) +\n  annotate(                 # 2° anotação 2/3\n    geom=\"point\",           # tipo de anotação: ponto\n    x=as.Date(\"2016-01-01\"), # ponto que a anotação deve aparecer\n    y=448.31,               # ponto cruzado entre X e Y\n    size=3,                 # tamanho do ponto\n    color = \"#e20000\"       # cor do ponto\n    ) +\n  annotate(                 # 2° anotação 3/3\n    geom=\"point\",           # tipo da anotação: ponto\n    x=as.Date(\"2016-01-01\"), # ponto que a anotação deve aparecer\n    y=448.31,               # ponto cruzado entre X e Y\n    size=5,                 # tamanho do ponto\n    shape=21,               # formato do ponto\n    fill=\"transparent\",     # preenchimento transparente\n    color=\"#e20000\"         # cor somente na borda\n    ) +\n  annotate(                 # 3° anotação 1/3\n    geom=\"text\",            # tipo de anotação: texto\n    x=as.Date(\"2021-01-01\"), # ponto que a anotação deve aparecer\n    y=700,                  # ajustando a altura da anotação\n    label=\"R$ 654,15\",      # texto de referência\n    size=4,                 # tamanho do texto\n    color = \"#e20000\",      # cor do texto\n    family = \"Teko\"         # fonte do texto\n    ) +\n  annotate(                 # 3° anotação 2/3\n    geom=\"point\",           # tipo de anotação: ponto\n    x=as.Date(\"2021-01-01\"), # ponto que a anotação deve aparecer\n    y=654.15,               # ponto cruzado entre X e Y\n    size=3,                 # tamanho do ponto\n    color = \"#e20000\"       # cor do ponto\n    ) +\n  annotate(                 # 3° anotação 3/3\n    geom=\"point\",           # tipo de anotação: ponto\n    x=as.Date(\"2021-01-01\"), # ponto que a anotação deve aparecer\n    y=654.15,               # ponto cruzado entre X e Y\n    size=5,                 # tamanho do ponto\n    shape=21,               # formato do ponto\n    fill=\"transparent\",     # preenchimento transparente\n    color=\"#e20000\"         # cor somente na borda\n    ) +\n  labs(                     # rótulos\n    x = NULL,               # anula rótulo do eixo X\n    y = NULL,               # anula rótulo do eixo Y\n    # título\n    title='Valor da cesta básica',\n    # sub-título\n    subtitle = \"Com base na cidade de São Paulo-SP\",\n    # legenda\n    caption='Fonte: https://www.dieese.org.br/cesta/ \\nDataViz: @hcostax'\n    ) +\n  scale_x_date(             # definindo escalas p/ eixo X\n  date_breaks = \"1 year\",   # intervalos de 1 ano\n  date_labels = \"%Y\"        # rotular somente o ano\n  ) +\n  scale_y_continuous(       # definindo escalas p/ eixo Y\n    breaks = seq(           # definindo o intervalo\n      from = 0, \n      to = 700, \n      by = 100\n      ),\n    limits=c(0, 700),       # definindo os limites\n    labels = scales::dollar_format( # adicionando notação monetária\n      prefix=\"R$\"           # definindo como \"R$\" real brasileiro\n      )\n  ) +\n  custom_theme()            # aplicando o tema customizado\n\n# ---\n\nprint(plot)                 # gerando o gráfico\n\n# ---\n```\n\nEsse enorme bloco de código gera o gráfico final. O resultado foi bastante satisfatório (p/ mim, rsrs). Após executar todos esses passos temos o gráfico:\n\n![](./img/cesta_basica.png)\n\nO gráfico não ficou exatamente igual ao gráfico publicado no perfil do Economista Visual no instagram, mas chegamos bem próximo. O objetivo aqui foi reproduzir a informação, e para deixar mais divertido, reproduzir aos moldes do original.\n\nVocê também pode reproduzir isso escolhendo a cidade que quiser.\n\nConfira o código completo no meu [Github](https://github.com/hcostax/01---Desafio_EconomistaVisual).\n\n::: callout-note\n# Ei! 👋, você achou meu trabalho útil? Considere me comprar um café ☕, clicando aqui 👇🏻\n\n<a href=\"https://www.buymeacoffee.com/hcostax\"><img src=\"https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&amp;emoji=&amp;slug=hcostax&amp;button_colour=5F7FFF&amp;font_colour=ffffff&amp;font_family=Cookie&amp;outline_colour=000000&amp;coffee_colour=FFDD00\"/></a>\n:::\n","srcMarkdownNoYaml":"\n\n![](feature.png)\n\nNa publicação de hoje, quero trazer uma brincadeira que fiz comigo mesmo, um pequeno incentivo para voltar a publicar conteúdos sobre R (eu já estava enferrujado) entre outros assunto sobre economia.\n\nPasseando pelo instagram, encontrei um perfil que pública muita informação sobre economia em formato de visualização, o Economista Visual.\n\nVendo um gráfico sobre o [preço da cesta básica na cidade de São Paulo - SP](https://www.instagram.com/p/CLaQpRiB8pR/)\n\n![](./img/cestabasica.jpg)\n\nResolvi criar o desafio de **reproduzir** esta visualização. Claro que não conseguiria deixar igual, mas poderia chegar bem perto.\n\nVamos começar pela fonte dos dados. Os dados utilizado no gráfico vem da base do DIEESE (Departamento Intersindical de Estatística e Estudos Socioeconômicos), que faz o levantamento do valor da Cesta Básica de Alimentos em várias cidades do país.\n\nAcessando o website do DIEESE, na pagina do banco de dados de [Cesta Básica de Alimentos](https://www.dieese.org.br/cesta/) é possível escolher a cidade desejada e fazer o *download* da planilha contendo as informações sobre o valor da cesta básica.\n\n![](./img/db_dieese.jpg)\n\nCom os dados em mãos, é hora de ir para o RStudio e começar \"os trabalhos\". *Let's Code!*\n\n``` r\n# para retirar notacoes cientifica\noptions(scipen = 999)\n\n\n# Pacotes necessarios para o projeto\n\nlibrary(tidyverse)     # conjunto de pacotes essenciais\nlibrary(readxl)        # pacote para \"ler\" arquivos excel\nlibrary(lubridate)     # pacote para trabalhar com datas\nlibrary(scales)        # pacote para trabalhar com escalas\nlibrary(here)          # fluxos de trabalho orientados a projetos\n```\n\nParticularmente, prefiro utilizar um fluxo orientado a projetos e por isso o pacote `here`está na lista acima. O pacote `here` implementa uma maneira mais simples de encontrar seus arquivos. O objetivo do pacote `here` é permitir a referência fácil de arquivos em [fluxos de trabalho orientados a projetos](https://rstats.wtf/project-oriented-workflow.html). Em contraste com o uso `setwd()`, que é frágil e dependente da maneira como você organiza seus arquivos, `here` usa o diretório de nível superior de um projeto para construir facilmente caminhos para os arquivos.\n\nApós carregar os pacotes, é hora de ler os dados que estão na planilha em formato `.xls`.\n\n``` r\n# Para carregar os dados usaremos o codigo a seguir:\n\ncesta_basica <- read_excel(     # funcao que ler arquivos .xls\n  here::here(                   # funcao que informa o local\n    \"dados\",\"exporta.xls\"       # \"local\", \"arquivo\"\n    )\n)\n```\n\nAgora que os dados já estão no *global environment*, vamos usar de alguns \"costumes\" de pré-analise para conhecer os dados. Lembrando que qualquer modificação nos dados será feito inteiramente e diretamente no R.\n\n``` r\n# visualizar a situacao dos dados\nhead(cesta_basica)              # funcao imprime no console \n                                # as 10 primeiras observacoes\n\n## A tibble: 6 x 2\n#  `Gasto Mensal - Total da Cesta` ...2     \n#  <chr>                           <chr>    \n# 1 NA                              São Paulo\n# 2 01-2000                         112.22   \n# 3 02-2000                         110.8    \n# 4 03-2000                         115.13   \n# 5 04-2000                         115.92   \n# 6 05-2000                         111.78 \n```\n\nO resultado mostra o óbvio, que os dados precisam de \"tratamento\" antes de pensarmos em extrair qualquer informação. Aqui neste caso, precisa retirar a primeira linha, que contém NA (*not available*) e uma palavra (São Paulo) onde deveria ser números. Os nomes das colunas (variáveis) também necessitam de atenção. Vamos olhar um pouco mais, com a função `tail()`.\n\n``` r\ntail(cesta_basica)              # funcao imprime no console \n                                # as 10 ultimas observacoes\n\n# A tibble: 6 x 2\n#  `Gasto Mensal - Total da Cesta`    ...2          \n#   <chr>                              <chr>         \n# 1 11-2020                            629.179999999~\n# 2 12-2020                            631.460000000~\n# 3 01-2021                            654.149999999~\n# 4 Fonte: DIEESE                      NA            \n# 5 (1) Série recalculada, conforme mudança metodológica realizada # na ~ NA            \n# 6 Tomada especial de preços a partir de abril de 2020 NA    \n```\n\nComo esperado, só reforça a necessidade de um tratamento simples nos dados. *A priori* é uma \"limpeza\" de linhas indesejadas.\n\nPor boas práticas, irei modificar o \"nome\" do objeto (data frame), pois CB é mais simples e fácil que cesta_basica.\n\n``` r\nCB <- cesta_basica %>%          # criando um objeto reduzindo\n                                # o nome do dataframe para CB\n                                # ao inves de cesta_basica\n                                # e usando o operador \" %>% \"\n  \n  rename(                       # funcao para renomear colunas\n    Data = `Gasto Mensal - Total da Cesta`,\n    Valor = ...2\n  ) %>%                       \n  slice(2:255)                  # funcao que corta os dados\n                                # retirando apenas o desejado\n```\n\nAgora temos que verificar as características dos nossos dados. Utilizo a função `srt()`.\n\n``` r\nstr(CB)\n\n# tibble [254 x 2] (S3: tbl_df/tbl/data.frame)\n# $ Data : chr [1:254] \"01-2000\" \"02-2000\" \"03-2000\" \"04-2000\" ...\n# $ Valor: chr [1:254] \"112.22\" \"110.8\" \"115.13\" \"115.92\" ...\n```\n\nTemos 254 observacoes e 2 colunas (variaveis) as 2 variaveis estao em formato -`chr`- caracteres e precisamos modificar esses formatos, passando a variavel `Valor` para o formato númerico, e a variável Data como datas, para isso utilizaremos os passos a seguir:\n\n``` r\nCB <- CB %>%                   # substituindo o dataframe\n  mutate(                      # funcao p/ modificar variaveis\n    Data = rep(seq(            # Substituindo a variavel Data\n                               # por uma variavel no formato de datas\n                               # criando uma sequencia de datas\n      from = as.Date(\"2000-01-01\"),\n      to = as.Date(\"2021-01-01\"),\n      by =\"1 month\"\n    )),\n    Valor = as.numeric(Valor) # modificando a variavel ´Valor´\n                              # para o formato numerico\n  )\n\n# Erro: Problem with `mutate()` input `Data`.\n# x Input `Data` can't be recycled to size 254.\n# i Input `Data` is `rep(...)`.\n# i Input `Data` must be size 254 or 1, not 253.\n```\n\nPercebemos esse erro que significa que o vetor de datas que tentamos criar nao é do mesmo \"tamanho\" que a variavel Data anterior. A variavel Data tem 254 observacoes e nosso vetor de datas tem apenas 253. Totalmente sem sentido, pois criamos um vetor de datas que segue uma sequencia mes a mes de 01/01/2000 ate 01/01/2021.\n\n*A priori*, temos a hipótese de que há valores e data repetidas como a base de dados eh pequena (254 obs) usaremos a funcao View() para ver a base completa e entende-la para encontrar a observacao repetida.\n\nEncontramos a observacao 193, com a data 12-2015 (1) e valor de 418.13. Como nao pesquisei a fundo o motivo, vou considerar como um reajuste no valor, entao irei retirar a observacao anterior (192).\n\nVou utilizar novamente o codigo acima, porém com um *upgrade*, adicionarei a funcao slice() para recortar a observacao 192.\n\n``` r\nCB <- CB %>%                   # substituindo o dataframe\n  slice(-192) %>%              # funcao p/ recortar \n  mutate(                      # funcao p/ modificar variaveis\n    Data = rep(seq(            # Substituindo a variavel Data\n                               # por uma variavel no formato de dadtas\n                               # criando uma sequencia de datas\n      from = as.Date(\"2000-01-01\"), \n      to = as.Date(\"2021-01-01\"), \n      by =\"1 month\"\n    )),\n    Valor = as.numeric(Valor)  # modificando a variavel ´Valor´\n                               # para o formato numerico\n  )\n```\n\nAgora vamos para a parte mais delicada de todo o desafio: criar a visualização, ou seja, reproduzir um gráfico parecido com o gráfico que foi publicado pelo Economista Visual.\n\nAntes de construir o gráfico, vamos elaborar a customização de uma tema para aplicar juntamente com o pacote `ggplot2`. Esta customização nos ajudará a gerar um gráfico parecido.\n\nNa construção do tema, precisamos usar a mesma fonte que o Economista Visual usa em seu gráfico, mas preferir não investigar qual fonte é usada, e usei uma fonte qualquer. Decidir usar a fonte Teko, que pode ser encontrada no [Google Fonts](https://fonts.google.com/specimen/Teko?preview.text_type=custom)\n\n``` r\ncustom_theme <- function(){\n  font <- \"Teko\"             # definindo a fonte a ser utilizada\n  theme(\n    # Elementos de grade e painel\n    panel.border =  element_blank(),       # sem borda\n    panel.grid.major.x = element_blank(),  # sem grades em X\n    panel.grid.minor.x = element_blank(),  # sem grades em X\n    panel.grid.major.y = element_line(\n    color = \"#d2d2d2\"                      # cor para a linha\n    ),                                     # da grade em Y\n    panel.grid.minor.y = element_blank(),  # sem grades menor em Y,     \n    axis.ticks = element_blank(),          # tira pontos do eixo\n    # Elementos textuais\n    plot.title = element_text(             # Titulo\n      family = font,                       # definir font\n      size = 20,                           # definir tamanho\n      face = 'bold',                       # negrito\n      color = \"black\",                     # cor da fonte\n      hjust = 0,                           # ajuste p/ esquerda*\n      vjust = 2),                          \n    \n    # *O valor de hjust e vjust sao \n    # definidos entre 0 e 1:\n    # 0 significa justificado a esquerda\n    # 1 significa justificado a direita\n    # 0.5 significa justificado ao meio\n    \n    plot.subtitle = element_text(          # Sub-titulo\n      family = font,                       # fonte\n      color=\"black\",                       # cor da fonte\n      size = 12),                          # tamanho\n      \n    plot.caption = element_text(           # Legenda\n      family = font,                       # fonte\n      size = 9,                            # tamanho da fonte\n      face = \"italic\",                     # italico\n      colour = \"#4c4c4c\",                  # cor da fonte\n      hjust = 0),                          # ajuste a esquerda\n    \n    axis.title = element_text(             # Titulo dos eixos\n      family = font,                       # fonte\n      face = 'bold',                       # negrito\n      color = \"#2e2e2e\",                   # cor da fonte\n      size = 10),                          # tamanho\n    \n    axis.text = element_text(              # Texto dos eixos\n      family = font,                       # fonte\n      color = \"#2e2e2e\",                   # cor\n      size = 9),                           # tamanho\n    \n    axis.text.x = element_text(            # margem p/ texto dos eixos\n      color = \"#2e2e2e\",                   # cor\n      margin=margin(5, b = 10)),\n    \n    axis.text.y = element_text(            # margem p/ texto dos eixos\n      color = \"#2e2e2e\",                   # cor\n      margin=margin(10, b = 20)),\n    \n    legend.position=\"bottom\",              # Posição da legenda\n                                           # bottom = meio-inferior\n    legend.title = element_blank(),        # Anular o título da legenda\n    legend.text = element_text(\n      colour=\"#2e2e2e\",                    # cor da legenda \n      family = font                        # fonte\n    ),\n    plot.background = element_rect(\n      fill = \"#f7efd8\",                    # cor de fundo do grafico\n      colour = NA\n      ),\n    panel.background = element_rect(\n      fill = \"#f7efd8\",                    # cor de fundo do painel\n      colour = NA\n      )\n    \n    # since the legend often requires manual tweaking \n    # based on plot content, don't define it here\n  )\n}\n```\n\nCom esse bloco de código acima, definimos o tema personalizado para aplicarmos ao gráfico. O gráfico do Economista Visual, usa uma fonte diferente do comum, fonte que não sei qual é, e o seu título e sub-título na cor preta com ajuste a esquerda (definimos isso no tema que customizamos acima), texto nos eixos em uma cor parecido com um cinza numa escala mais clara, a mesma cor para a legenda que também é ajustada a esquerda, e por fim, o gráfico é do tipo linha, na cor vermelha com um efeito \"glow\", ponto sólido menor que o circulo, e anotação em texto, tudo na cor vermelha.\n\nO eixo X é composto pelos anos observados (datas), e a escala do eixo X inicia no ano 2000 e termina no ano 2021 com intervalos a cada 1 ano. Já no eixo Y, temos os valores na escala de 0 a 700, com intervalo a cada 100.\n\nTendo essas informações em mente, é hora de elaborarmos o gráfico. Para isso, será utilizado as funções do pacote `ggplot2` e aplicaremos o tema customizado para ajustar a estética do nosso gráfico ao gráfico do Economista Visual.\n\n``` r\nplot <- CB %>%              # definindo o gráfico\n  ggplot(aes(x=Data)) +     # adicionando apenas o eixo X\n  geom_line(                # 1° linha do eixo Y\n    aes(y = Valor),         # definindo o Valor para o eixo Y\n    size = 3,               # espessura da linha\n    colour = '#e20000',     # cor (esolhi um verlho aleatorio)\n    alpha = 0.1             # alpha mede a transparência\n    ) +\n  geom_line(                # 2° linha do eixo Y\n    aes(y = Valor),         # definindo o Valor para o eixo Y\n    size = 2,               # espessura (menor que a 1°)\n    colour = '#e20000',     # cor (a mesma cor para todas)\n    alpha = 0.2             # transparência (maior que a 1°)\n    ) +\n  geom_line(                # 3° linha do eixo Y\n    aes(y = Valor),         # definindo o Valor para o eixo Y\n    size = 1,               # espessura (menor que a 2°) \n    colour = '#e20000',     # cor\n    alpha = 0.5             # transparência (maior que a 2°)\n    ) +\n  geom_line(                # 4° linha do eixo Y\n    aes(y = Valor),         # definindo o Valor para o eixo Y\n    size = 0.75,            # espessura (menor que a 3°)\n    colour = '#e20000'      # cor\n    ) +                     # sem alpha, para deixar a cor sólida\n  annotate(                 # 1° anotação 1/3\n    geom=\"text\",            # tipo de anotação: texto\n    x=as.Date(\"2000-01-01\"), # ponto que a anotação deve aparecer\n    y=160,                  # ajustando a altura do anotação\n    label=\"R$ 112,22\",      # Texto de referência\n    size=4,                 # tamanho do texto\n    color = \"#e20000\",      # cor do texto (a mesma da linha)\n    family = \"Teko\"         # fonte do texto (opcional)\n    ) +\n  annotate(                 # 1° anotação 2/3\n    geom=\"point\",           # tipo de anotação: ponto\n    x=as.Date(\"2000-01-01\"), # ponto que a anotação deve aparecer\n    y=112,                  # ponto cruzado entre X e Y\n    size=3,                 # tamanho do ponto\n    color = \"#e20000\"       # cor do ponto\n    ) +\n  annotate(                 # 1° anotação 3/3\n    geom=\"point\",           # tipo de anotação: ponto\n    x=as.Date(\"2000-01-01\"), # ponto que a anotação de aparecer\n    y=112,                  # ponto cruzado entre X e Y\n    size=5,                 # tamanho do ponto\n    shape=21,               # formato do ponto\n    fill=\"transparent\",     # preenchimento transparente\n    color=\"#e20000\"         # cor, aplica somente na borda \n    ) +\n  annotate(                 # 2° anotação 1/3\n    geom=\"text\",            # tipo de anotação: texto\n    x=as.Date(\"2016-01-01\"), # ponto que a anotação deve aparecer\n    y=500,                  # ajustando a altura da anotação\n    label=\"R$ 448,31\",      # texto de referência\n    size=4,                 # tamanho do texto\n    color = \"#e20000\",      # cor do texto\n    family = \"Teko\"         # fonte do texto\n    ) +\n  annotate(                 # 2° anotação 2/3\n    geom=\"point\",           # tipo de anotação: ponto\n    x=as.Date(\"2016-01-01\"), # ponto que a anotação deve aparecer\n    y=448.31,               # ponto cruzado entre X e Y\n    size=3,                 # tamanho do ponto\n    color = \"#e20000\"       # cor do ponto\n    ) +\n  annotate(                 # 2° anotação 3/3\n    geom=\"point\",           # tipo da anotação: ponto\n    x=as.Date(\"2016-01-01\"), # ponto que a anotação deve aparecer\n    y=448.31,               # ponto cruzado entre X e Y\n    size=5,                 # tamanho do ponto\n    shape=21,               # formato do ponto\n    fill=\"transparent\",     # preenchimento transparente\n    color=\"#e20000\"         # cor somente na borda\n    ) +\n  annotate(                 # 3° anotação 1/3\n    geom=\"text\",            # tipo de anotação: texto\n    x=as.Date(\"2021-01-01\"), # ponto que a anotação deve aparecer\n    y=700,                  # ajustando a altura da anotação\n    label=\"R$ 654,15\",      # texto de referência\n    size=4,                 # tamanho do texto\n    color = \"#e20000\",      # cor do texto\n    family = \"Teko\"         # fonte do texto\n    ) +\n  annotate(                 # 3° anotação 2/3\n    geom=\"point\",           # tipo de anotação: ponto\n    x=as.Date(\"2021-01-01\"), # ponto que a anotação deve aparecer\n    y=654.15,               # ponto cruzado entre X e Y\n    size=3,                 # tamanho do ponto\n    color = \"#e20000\"       # cor do ponto\n    ) +\n  annotate(                 # 3° anotação 3/3\n    geom=\"point\",           # tipo de anotação: ponto\n    x=as.Date(\"2021-01-01\"), # ponto que a anotação deve aparecer\n    y=654.15,               # ponto cruzado entre X e Y\n    size=5,                 # tamanho do ponto\n    shape=21,               # formato do ponto\n    fill=\"transparent\",     # preenchimento transparente\n    color=\"#e20000\"         # cor somente na borda\n    ) +\n  labs(                     # rótulos\n    x = NULL,               # anula rótulo do eixo X\n    y = NULL,               # anula rótulo do eixo Y\n    # título\n    title='Valor da cesta básica',\n    # sub-título\n    subtitle = \"Com base na cidade de São Paulo-SP\",\n    # legenda\n    caption='Fonte: https://www.dieese.org.br/cesta/ \\nDataViz: @hcostax'\n    ) +\n  scale_x_date(             # definindo escalas p/ eixo X\n  date_breaks = \"1 year\",   # intervalos de 1 ano\n  date_labels = \"%Y\"        # rotular somente o ano\n  ) +\n  scale_y_continuous(       # definindo escalas p/ eixo Y\n    breaks = seq(           # definindo o intervalo\n      from = 0, \n      to = 700, \n      by = 100\n      ),\n    limits=c(0, 700),       # definindo os limites\n    labels = scales::dollar_format( # adicionando notação monetária\n      prefix=\"R$\"           # definindo como \"R$\" real brasileiro\n      )\n  ) +\n  custom_theme()            # aplicando o tema customizado\n\n# ---\n\nprint(plot)                 # gerando o gráfico\n\n# ---\n```\n\nEsse enorme bloco de código gera o gráfico final. O resultado foi bastante satisfatório (p/ mim, rsrs). Após executar todos esses passos temos o gráfico:\n\n![](./img/cesta_basica.png)\n\nO gráfico não ficou exatamente igual ao gráfico publicado no perfil do Economista Visual no instagram, mas chegamos bem próximo. O objetivo aqui foi reproduzir a informação, e para deixar mais divertido, reproduzir aos moldes do original.\n\nVocê também pode reproduzir isso escolhendo a cidade que quiser.\n\nConfira o código completo no meu [Github](https://github.com/hcostax/01---Desafio_EconomistaVisual).\n\n::: callout-note\n# Ei! 👋, você achou meu trabalho útil? Considere me comprar um café ☕, clicando aqui 👇🏻\n\n<a href=\"https://www.buymeacoffee.com/hcostax\"><img src=\"https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&amp;emoji=&amp;slug=hcostax&amp;button_colour=5F7FFF&amp;font_colour=ffffff&amp;font_family=Cookie&amp;outline_colour=000000&amp;coffee_colour=FFDD00\"/></a>\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"center","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"github","toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.550","knitr":{"opts_chunk":{"dev":"ragg_png"}},"comments":{"utterances":{"repo":"hcostax/hcostax_dot_com"}},"theme":["cosmo","../../assets/paul-theme-light.scss"],"pagetitle":"{{< meta title >}} | Henrique Costa","lightbox":true,"mermaid":{"theme":"neutral"},"title-block-banner":true,"title-block-style":"plain","license":"CC BY-SA","toc-title":"Table of Contents","toc-location":"right","citation":true,"appendix-cite-as":"display","template-partials":["../../_partials/title-block-link-buttons/title-block.html"],"title":"Reproduzindo gráfico do Economista Visual - Valor da cesta básica (PT-BR)","author":"Henrique Costa","date":"2021-02-20","categories":["R","DataViz"],"description":"Desafio de reproduzir uma visualização, utilizando meus conhecimentos em R","image":"feature.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}